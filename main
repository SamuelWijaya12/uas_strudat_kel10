#include<stdio.h>
#include<stdlib.h>
#include<conio.h>
#include<string.h>

#define max 10

struct node{
	int noantrian;
	char notlpn [20];
	char nama[50];
	char email[50];
	int stok;
	struct node *next;
}*front = NULL, *rear = NULL, *top = NULL;

int nomorantrian = 0;

int countqueue();

int countstack(){
	struct node *temp;
	int count = 0;
	
	temp = top;
	while(temp != 0){
		count++;
		temp = temp->next;
	}
	printf("\n----------------------------");
	printf("\n STOK BUKU SAAT INI : %d \n",count);
	printf("----------------------------\n");
	return count;
}

int isEmptyqueue(){
	if(front == NULL){
		return true;
	}
	else{
		return false;
	}
}

int isEmptystack(){
	if(top == NULL){
		return true;
	}
	else{
		return false;
	}
}

void cekantrian (){
	
	struct node *pWalker;

	printf("---------------- [ ANTRIAN SAAT INI ] ----------------\n\n\n");
    if(isEmptyqueue()){
        printf("                   ANTRIAN KOSOSNG \n");
    } 
    else{	
		pWalker = front;
        printf("                    DAFTAR ANTRIAN       \n");
        printf("        ====================================\n");
		
        while(pWalker != NULL){
    		printf("        ------------------------------------\n");
			printf("        | Nomor Antrian : %d\n", pWalker->noantrian);
			printf("        | Nama          : %s\n", pWalker->nama);
			printf("        | No. Telepon   : %s\n", pWalker->notlpn);
			printf("        | E - Mail      : %s\n", pWalker->email);		
			printf("        ------------------------------------\n");        	
            pWalker = pWalker->next;
        }
  		printf("\n");
    } 
} 

int isFullstack(){
	int pos;
	pos = countstack();
	if(pos == max){
		return true;
	}else{
		return false;
	}
}

void ambilbuku (){
	struct node *temp;
	
	temp = front;
	front = front->next;
	if(front == NULL){
	rear = NULL;
	}
	free(temp);
}

int belibuku(){
	struct node *temp;
	int buku;
	
	if(isEmptystack()){
		printf("\nSTOK HABIS!\n\n");
		system("PAUSE");
	} else if (isEmptyqueue()){
		printf("\nMasuk Ke Antrian Dan Lakukan Pendaftaran Terlebih Dahulu\n\n");
		system("PAUSE");
	}else{
		ambilbuku();
		
		temp = top;
		buku = top->stok;
		top = top->next;
		free(temp);
		temp = NULL;
	}	
	return buku;	
}

void tambahstok (){
	
	struct node *pNew;
	int buku;
	
	if(isFullstack()){
		printf("STOK BUKU PENUH!\n\n");
		system("PAUSE");
	}else{	
		while (countstack()<max){
			buku++;
			pNew = (struct node *)malloc(sizeof(struct node));			
			pNew->stok = buku;
			pNew->next = NULL;
			pNew->next = top;
			top = pNew;
			system("cls");
		}
	}
}

int countqueue()
{
	int count = 0;
	struct node *pPre;
	pPre = front;
	
	while(pPre!=0)
	{
		count++;
		pPre = pPre->next;
	}
	printf("\n----------------------------");
	printf("\nTOTAL ANTRIAN SAAT INI : %d\n",count);
	printf("----------------------------\n");
	return count;
}	
//----------------------------------------------------------------------------------------


void cekstok(){
	struct node *temp;
	
	if(isEmptystack()){
		printf("\n\tSTOK KOSONG\n\n");
	}else{
		printf("\n");
		temp = top;
		while(temp != NULL){
			printf("\t---------\n");
			printf("\t|  \t|\n", temp->stok);
			temp = temp->next;
		}
		printf("\t---------\n");
	}
}

if (select==0){
			exit;
		}else if(select==1){
			masuk();
			
			system("cls");
			printf("DATA BERHASIL DI INPUTKAN\n");
			
			system("PAUSE");
		}else if(select==2){
			fflush(stdin);
			cekantrian();
			fflush(stdin);
			
			countqueue();
			system("PAUSE");
		}else if(select==3){
			belibuku();
		}else if(select==4){
			cekstok();
			countstack();
			system("PAUSE");
		}else if (select==5){
			tambahstok();
	        system("cls");
		}
		else{
			printf("\nERR : PILIHAN TIDAK DITEMUKAN\n");
			system("PAUSE");		
		}
	}while(select!=0);
}
